
type Theme {
    id: ID!
    theme: String!
    active: Boolean!
}

type Query {
    themes: [Theme!]!
    randomThemes(input: RandomThemeWhereInput!): [Theme!]!
}

type Mutation {
    createTheme(data: CreateThemeInput!): CreateThemeResult!
    updateTheme(where: ThemeWhereInput!, data: UpdateThemeInput!): UpdateThemeResult!
}

input ThemeWhereInput {
    id: ID!
}

input RandomThemeWhereInput {
    amount: Int!
}

input CreateThemeInput {
    theme: String!
}

input UpdateThemeInput {
    theme: String
    active: Boolean
}

type CreateThemeResultSuccess {
    theme: Theme!
}

type ThemeAlreadyExistsError {
    message: String!
}

type UpdateThemeResultSuccess {
    theme: Theme!
}

union CreateThemeResult = CreateThemeResultSuccess | ThemeAlreadyExistsError | BadRequestError | BaseError
union UpdateThemeResult = UpdateThemeResultSuccess | ThemeAlreadyExistsError | BadRequestError | NotFoundError | BaseError
